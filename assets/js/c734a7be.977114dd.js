"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8775],{1051:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=i(4848),t=i(8453);const r={sidebar_position:6},o="Air Quality Sensor",a={id:" hardware-documentation-and-code-guide/air-quality-sensor",title:"Air Quality Sensor",description:"Introduction",source:"@site/docs/ hardware-documentation-and-code-guide/air-quality-sensor.md",sourceDirName:" hardware-documentation-and-code-guide",slug:"/ hardware-documentation-and-code-guide/air-quality-sensor",permalink:"/docs/ hardware-documentation-and-code-guide/air-quality-sensor",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Temperature + Humidity Sensor",permalink:"/docs/ hardware-documentation-and-code-guide/temperature-and-humidity-sensor"},next:{title:"OLED Display",permalink:"/docs/ hardware-documentation-and-code-guide/oled-display"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"What is the CCS811?",id:"what-is-the-ccs811",level:3},{value:"How the CCS811 Works:",id:"how-the-ccs811-works",level:3},{value:"Key Features:",id:"key-features",level:3},{value:"Real-World Applications:",id:"real-world-applications",level:3},{value:"Pinout for CCS811 Module:",id:"pinout-for-ccs811-module",level:3},{value:"Code Guide",id:"code-guide",level:2},{value:"Library and Sensor Setup",id:"library-and-sensor-setup",level:3},{value:"Code Flow",id:"code-flow",level:3},{value:"Code Breakdown:",id:"code-breakdown",level:3},{value:"Available Functions in <code>AirQuality.h</code>",id:"available-functions-in-airqualityh",level:2},{value:"Class Creation and Initialization Functions",id:"class-creation-and-initialization-functions",level:3},{value:"Create an Object of the Class:",id:"create-an-object-of-the-class",level:4},{value:"Initialize the Sensor:",id:"initialize-the-sensor",level:4},{value:"Connection Status Function",id:"connection-status-function",level:3},{value:"Ping the Sensor:",id:"ping-the-sensor",level:4},{value:"Air Quality Measurement Functions",id:"air-quality-measurement-functions",level:3},{value:"Get TVOC Levels:",id:"get-tvoc-levels",level:4},{value:"Get CO\u2082 Concentration:",id:"get-co-concentration",level:4},{value:"Get Temperature Readings:",id:"get-temperature-readings",level:4},{value:"Advanced Features",id:"advanced-features",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"air-quality-sensor",children:"Air Quality Sensor"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"The Air Quality Sensor Module consists of the CCS811 sensor. This sensor is designed to monitor indoor air quality by measuring the concentration of carbon dioxide (CO\u2082) and total volatile organic compounds (TVOCs)."}),"\n",(0,s.jsx)(n.h3,{id:"what-is-the-ccs811",children:"What is the CCS811?"}),"\n",(0,s.jsx)(n.p,{children:"The CCS811 is a digital gas sensor that provides reliable measurements of air quality. It is primarily used to assess the levels of CO\u2082 and TVOCs, which are important for maintaining good indoor air quality."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CO\u2082 (Carbon Dioxide)"}),": Elevated levels can indicate poor ventilation, leading to discomfort and reduced cognitive function."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TVOCs (Total Volatile Organic Compounds)"}),": Organic chemicals found in everyday products like paints and cleaning supplies, which can have adverse health effects."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-the-ccs811-works",children:"How the CCS811 Works:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Measurement Process"}),": Uses MEMS technology to detect gas concentrations and requires a short warm-up time for accurate readings."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Output"}),": Communicates via I2C, reporting CO\u2082 in ppm and TVOCs in \xb5g/m\xb3."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-features",children:"Key Features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Digital Output"}),": Easy integration with microcontrollers via I2C."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Low Power Consumption"}),": Suitable for battery-powered devices."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Built-in Temperature and Humidity Compensation"}),": Ensures accuracy in varying conditions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Calibration"}),": Automatic calibration after a period of operation."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"real-world-applications",children:"Real-World Applications:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Indoor Air Quality Monitoring"}),": Used in homes, offices, and schools."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HVAC Systems"}),": Optimizes climate control based on air quality."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Smart Home Devices"}),": Integrated into smart systems for automatic monitoring and control."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pinout-for-ccs811-module",children:"Pinout for CCS811 Module:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"VCC"}),": Power supply (3.3V to 5V)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GND"}),": Ground."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SCL"}),": Clock line for I2C communication."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SDA"}),": Data line for I2C communication."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Refer to the ",(0,s.jsx)(n.a,{href:"https://cdn.sparkfun.com/assets/learn_tutorials/1/4/3/CCS811_Datasheet-DS000459.pdf",children:"CCS811 Datasheet"})," for detailed specifications."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"code-guide",children:"Code Guide"}),"\n",(0,s.jsx)(n.h3,{id:"library-and-sensor-setup",children:"Library and Sensor Setup"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Library Name:"})," ",(0,s.jsx)(n.code,{children:"AirQuality.h"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"I2C address of the sensor:"})," ",(0,s.jsx)(n.code,{children:"0x5B"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"code-flow",children:"Code Flow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <AirQuality.h>  // Include the library\nAirQuality sensor;       // Create an object of the class\n\nvoid setup() {\n  Serial.begin(115200);  // Initialize serial communication\n  Wire.begin();          // Initialize I2C communication\n  if (sensor.begin()) {\n    Serial.println("Sensor connected");\n  } else {\n    Serial.println("Sensor not connected");\n  }\n}\n\nvoid loop() {\n  if (sensor.ping()) {\n    Serial.println("Sensor connected");\n    // Display data\n  } else {\n    Serial.println("Sensor disconnected");\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"code-breakdown",children:"Code Breakdown:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Include the Library"}),": Import the required library for interacting with the sensor."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create a Sensor Object"}),": Enable communication between the microcontroller and the sensor."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initialize Serial and I2C"}),": Set up communication in the ",(0,s.jsx)(n.code,{children:"setup()"})," function."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check Sensor Connection"}),": Ensure the sensor is connected and proceed with actions based on connection status."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor the Sensor"}),": Continuously check the connection and fetch data in the ",(0,s.jsx)(n.code,{children:"loop()"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"available-functions-in-airqualityh",children:["Available Functions in ",(0,s.jsx)(n.code,{children:"AirQuality.h"})]}),"\n",(0,s.jsx)(n.p,{children:"The AirQuality library offers a variety of useful functions to retrieve data and interact with the sensor."}),"\n",(0,s.jsx)(n.h3,{id:"class-creation-and-initialization-functions",children:"Class Creation and Initialization Functions"}),"\n",(0,s.jsx)(n.p,{children:"These functions are foundational and should be used when setting up the sensor."}),"\n",(0,s.jsx)(n.h4,{id:"create-an-object-of-the-class",children:"Create an Object of the Class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"AirQuality();\n"})}),"\n",(0,s.jsx)(n.h4,{id:"initialize-the-sensor",children:"Initialize the Sensor:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"CCS811_STATUS_t begin();\n"})}),"\n",(0,s.jsx)(n.p,{children:"This function performs the necessary setup for the sensor and returns a status code indicating if the sensor is connected properly."}),"\n",(0,s.jsx)(n.h3,{id:"connection-status-function",children:"Connection Status Function"}),"\n",(0,s.jsx)(n.p,{children:"This function checks whether the sensor is connected."}),"\n",(0,s.jsx)(n.h4,{id:"ping-the-sensor",children:"Ping the Sensor:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool ping(void);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It returns ",(0,s.jsx)(n.code,{children:"true"})," if the sensor is connected; otherwise, it returns ",(0,s.jsx)(n.code,{children:"false"}),". If a disconnection occurs, it also attempts to re-establish the connection."]}),"\n",(0,s.jsx)(n.h3,{id:"air-quality-measurement-functions",children:"Air Quality Measurement Functions"}),"\n",(0,s.jsx)(n.p,{children:"These functions allow you to retrieve air quality measurements, including TVOCs and CO\u2082 levels."}),"\n",(0,s.jsx)(n.h4,{id:"get-tvoc-levels",children:"Get TVOC Levels:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"uint16_t getTVOC();\n"})}),"\n",(0,s.jsx)(n.p,{children:"This function returns the total volatile organic compounds (TVOC) level in parts per billion (ppb)."}),"\n",(0,s.jsx)(n.h4,{id:"get-co-concentration",children:"Get CO\u2082 Concentration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"uint16_t getCO2();\n"})}),"\n",(0,s.jsx)(n.p,{children:"This function returns the carbon dioxide (CO\u2082) concentration in parts per million (ppm)."}),"\n",(0,s.jsx)(n.h4,{id:"get-temperature-readings",children:"Get Temperature Readings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"float getTemperature();\n"})}),"\n",(0,s.jsx)(n.p,{children:"This function returns the temperature in degrees Celsius (\xb0C), which can be used for air quality reading compensation."}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsxs)(n.p,{children:["The library also provides advanced functions for sensor calibration and performance optimization. Example code can be found in Arduino IDE under ",(0,s.jsx)(n.code,{children:"File -> Examples -> AirQuality_Demo"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);