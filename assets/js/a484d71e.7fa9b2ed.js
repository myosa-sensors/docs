"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9],{2789:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=i(4848),o=i(8453);const r={sidebar_position:8},s="Actuator",c={id:" hardware-documentation-and-code-guide/actuator",title:"Actuator",description:"Introduction:",source:"@site/docs/ hardware-documentation-and-code-guide/actuator.md",sourceDirName:" hardware-documentation-and-code-guide",slug:"/ hardware-documentation-and-code-guide/actuator",permalink:"/docs/ hardware-documentation-and-code-guide/actuator",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"OLED Display",permalink:"/docs/ hardware-documentation-and-code-guide/oled-display"}},a={},l=[{value:"Introduction:",id:"introduction",level:2},{value:"Components:",id:"components",level:3},{value:"I2C GPIO Expander:",id:"i2c-gpio-expander",level:4},{value:"TRIAC (Triode for Alternating Current):",id:"triac-triode-for-alternating-current",level:4},{value:"Buzzer:",id:"buzzer",level:4},{value:"How the Custom Actuator Works:",id:"how-the-custom-actuator-works",level:3},{value:"I2C Communication:",id:"i2c-communication",level:4},{value:"TRIAC Control:",id:"triac-control",level:4},{value:"Buzzer Activation:",id:"buzzer-activation",level:4},{value:"Real-World Applications:",id:"real-world-applications",level:3},{value:"Pinout for the Actuator Module:",id:"pinout-for-the-actuator-module",level:3},{value:"Code Guide",id:"code-guide",level:2},{value:"Library and Sensor Setup",id:"library-and-sensor-setup",level:3},{value:"Code Flow:",id:"code-flow",level:3},{value:"Include the Required Library:",id:"include-the-required-library",level:4},{value:"Create a Sensor Object:",id:"create-a-sensor-object",level:4},{value:"Initialize Serial and I2C Communication:",id:"initialize-serial-and-i2c-communication",level:4},{value:"Establish a Connection with the Sensor:",id:"establish-a-connection-with-the-sensor",level:4},{value:"Continuously Monitor the Sensor:",id:"continuously-monitor-the-sensor",level:4},{value:"Available Functions in <code>Actuator.h</code>",id:"available-functions-in-actuatorh",level:2},{value:"Class Creation and Initialization Functions:",id:"class-creation-and-initialization-functions",level:3},{value:"Pin Configuration Functions:",id:"pin-configuration-functions",level:3},{value:"Pin Control Functions:",id:"pin-control-functions",level:3},{value:"Advanced Features:",id:"advanced-features",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"actuator",children:"Actuator"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction:"}),"\n",(0,t.jsx)(n.p,{children:"The actuator module is designed to interact with external devices through a GPIO expander using the I2C protocol. It includes a TRIAC for controlling AC loads and a buzzer for sound alerts, making it a versatile component for controlling devices and signaling in projects."}),"\n",(0,t.jsx)(n.h3,{id:"components",children:"Components:"}),"\n",(0,t.jsx)(n.h4,{id:"i2c-gpio-expander",children:"I2C GPIO Expander:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A GPIO (General Purpose Input/Output) expander increases the number of input/output pins available to your microcontroller via the I2C communication protocol."}),"\n",(0,t.jsx)(n.li,{children:"This allows you to control more devices (such as relays, sensors, or actuators) without being limited by the available pins on the ESP32."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"triac-triode-for-alternating-current",children:"TRIAC (Triode for Alternating Current):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A TRIAC is a semiconductor device used to control power to AC loads. It can switch electrical currents in both directions, making it suitable for controlling AC devices like lights, motors, and heaters."}),"\n",(0,t.jsx)(n.li,{children:"It is often used for dimming lights or controlling the speed of motors."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"buzzer",children:"Buzzer:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A buzzer is a simple sound-emitting component that can be used to signal or alert users. It is commonly employed in alarms, notifications, or status indicators."}),"\n",(0,t.jsx)(n.li,{children:"The buzzer can be driven through the GPIO expander, allowing it to be triggered when needed."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-the-custom-actuator-works",children:"How the Custom Actuator Works:"}),"\n",(0,t.jsx)(n.h4,{id:"i2c-communication",children:"I2C Communication:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The GPIO expander communicates with the microcontroller (ESP32) using the I2C protocol. This simplifies the wiring and allows multiple devices to be controlled with fewer pins."}),"\n",(0,t.jsx)(n.li,{children:"Commands are sent from the ESP32 to control both the TRIAC and the buzzer via the expander."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"triac-control",children:"TRIAC Control:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The TRIAC allows for the switching of AC loads. When a control signal is sent through the GPIO expander, the TRIAC is activated, turning the connected AC device on or off (or dimming if used in such an application)."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"buzzer-activation",children:"Buzzer Activation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The buzzer is controlled by the GPIO expander and can be activated to emit sound for alerts or notifications in response to conditions in your project."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"real-world-applications",children:"Real-World Applications:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Home Automation"}),": Can be used to control household appliances like lights, fans, or heaters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Alarms"}),": The buzzer can be used in security or notification systems."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interactive Projects"}),": This module allows students to explore how to control AC devices and create audible signals, adding more interactivity to their projects."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pinout-for-the-actuator-module",children:"Pinout for the Actuator Module:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"VCC"}),": Power supply (typically 3.3V to 5V)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GND"}),": Ground."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SCL"}),": Clock line for I2C communication (from the GPIO expander)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SDA"}),": Data line for I2C communication (from the GPIO expander)."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"code-guide",children:"Code Guide"}),"\n",(0,t.jsx)(n.h3,{id:"library-and-sensor-setup",children:"Library and Sensor Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Library Name:"})," ",(0,t.jsx)(n.code,{children:"Actuator.h"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"I2C address of the sensor:"})," ",(0,t.jsx)(n.code,{children:"0x41"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"code-flow",children:"Code Flow:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <library>\nCreate an object of the class\n\nvoid setup()\n{\n  // Serial communication and Wire Begin.\n  Try setting up the sensor.\n\n  if (sensor connected) {\n    // sensor is connected\n  } else {\n    // sensor is disconnected\n  }\n}\n\nvoid loop() {\n  if (Ping == Sensor is connected) {\n    // display data\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"When working with the sensor, it's important to follow a logical sequence in your code to ensure smooth operation. Here's how to approach it step-by-step:"}),"\n",(0,t.jsx)(n.h4,{id:"include-the-required-library",children:"Include the Required Library:"}),"\n",(0,t.jsx)(n.p,{children:"The first step is to include the correct library to access the predefined functions for interacting with the sensor."}),"\n",(0,t.jsx)(n.h4,{id:"create-a-sensor-object",children:"Create a Sensor Object:"}),"\n",(0,t.jsx)(n.p,{children:"Create an object for the sensor to enable communication between your microcontroller and the sensor."}),"\n",(0,t.jsx)(n.h4,{id:"initialize-serial-and-i2c-communication",children:"Initialize Serial and I2C Communication:"}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"setup()"})," function, initialize serial communication to debug or display messages. Set up I2C communication so the microcontroller can talk to the sensor."]}),"\n",(0,t.jsx)(n.h4,{id:"establish-a-connection-with-the-sensor",children:"Establish a Connection with the Sensor:"}),"\n",(0,t.jsx)(n.p,{children:"Check if the sensor is connected and respond accordingly (displaying a message or taking an action if it fails to connect)."}),"\n",(0,t.jsx)(n.h4,{id:"continuously-monitor-the-sensor",children:"Continuously Monitor the Sensor:"}),"\n",(0,t.jsxs)(n.p,{children:["Inside the ",(0,t.jsx)(n.code,{children:"loop()"}),", regularly check if the sensor is still connected. If it is, proceed to fetch and display sensor data."]}),"\n",(0,t.jsxs)(n.h2,{id:"available-functions-in-actuatorh",children:["Available Functions in ",(0,t.jsx)(n.code,{children:"Actuator.h"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Actuator"})," library offers a variety of useful functions to interact with the actuator components in your project."]}),"\n",(0,t.jsx)(n.h3,{id:"class-creation-and-initialization-functions",children:"Class Creation and Initialization Functions:"}),"\n",(0,t.jsx)(n.p,{children:"These functions are foundational and should be used when setting up the actuator."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Create an Object of the Class"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"Actuator();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Explanation: This function is called when an object of the class Actuator is created, allowing you to initialize the actuator for operation."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Ping the Actuator"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool ping();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Explanation: This function performs the necessary setup for the actuator. It returns true if the actuator is successfully connected; otherwise, it returns false. Call this in your ",(0,t.jsx)(n.code,{children:"setup()"})," function to ensure the actuator is ready."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pin-configuration-functions",children:"Pin Configuration Functions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Get Pin Mode"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"PIN_MODE_t getMode(PCA_PIN_t pin);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Explanation: This function returns the mode configured for the specified pin. Each pin can be configured as either Input or Output."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Get Pin State"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"PIN_STATE_t getState(PCA_PIN_t pin);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Explanation: This function returns the current state of the specified pin. Each pin can either be HIGH or LOW."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pin-control-functions",children:"Pin Control Functions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Set Pin Mode"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void setMode(PCA_PIN_t pin, PIN_MODE_t newMode);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Explanation: This function sets the desired mode for the specified pin. For example, ",(0,t.jsx)(n.code,{children:"setMode(0, IO_OUTPUT)"})," configures pin 0 for OUTPUT mode."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Set Pin State"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void setState(PCA_PIN_t pin, PIN_STATE_t newState);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Explanation: This function sets the desired state for the specified pin. For instance, ",(0,t.jsx)(n.code,{children:"setState(0, IO_HIGH)"})," sets pin 0 to HIGH."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features:"}),"\n",(0,t.jsx)(n.p,{children:"The library also includes several advanced functions, as well as private functions, which are detailed in the library documentation."}),"\n",(0,t.jsxs)(n.p,{children:["You can also find the example code in Arduino IDE by going to ",(0,t.jsx)(n.code,{children:"File -> Examples -> Actuator_Demo"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(6540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);