"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7697],{7617:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var r=s(4848),i=s(8453);const l={sidebar_position:4},t="Barometric Pressure Sensor",a={id:" hardware-documentation-and-code-guide/barometric-pressure-sensor",title:"Barometric Pressure Sensor",description:"Introduction",source:"@site/docs/ hardware-documentation-and-code-guide/barometric-pressure-sensor.md",sourceDirName:" hardware-documentation-and-code-guide",slug:"/ hardware-documentation-and-code-guide/barometric-pressure-sensor",permalink:"/docs/ hardware-documentation-and-code-guide/barometric-pressure-sensor",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Gesture + RGB Sensor",permalink:"/docs/ hardware-documentation-and-code-guide/gesture-and-rgb-sensor"},next:{title:"Temperature + Humidity Sensor",permalink:"/docs/ hardware-documentation-and-code-guide/temperature-and-humidity-sensor"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"What is the BMP180?",id:"what-is-the-bmp180",level:3},{value:"Key Concepts:",id:"key-concepts",level:4},{value:"How the BMP180 Works:",id:"how-the-bmp180-works",level:3},{value:"Measurement Process:",id:"measurement-process",level:4},{value:"Data Output:",id:"data-output",level:4},{value:"Key Features of the BMP180:",id:"key-features-of-the-bmp180",level:3},{value:"Real-World Applications:",id:"real-world-applications",level:3},{value:"Pinout for BMP180 Module:",id:"pinout-for-bmp180-module",level:3},{value:"Code Guide",id:"code-guide",level:2},{value:"Library:",id:"library",level:3},{value:"Code Flow:",id:"code-flow",level:3},{value:"Available Functions in <code>BarometricPressure.h</code>",id:"available-functions-in-barometricpressureh",level:2},{value:"Class Creation and Initialization:",id:"class-creation-and-initialization",level:3},{value:"Create an Object:",id:"create-an-object",level:4},{value:"Initialize the Sensor:",id:"initialize-the-sensor",level:4},{value:"Ping the Sensor:",id:"ping-the-sensor",level:4},{value:"Pressure Retrieval Functions:",id:"pressure-retrieval-functions",level:3},{value:"Get Pressure in Pascals:",id:"get-pressure-in-pascals",level:4},{value:"Get Pressure in Kilopascals:",id:"get-pressure-in-kilopascals",level:4},{value:"Get Pressure in mmHg:",id:"get-pressure-in-mmhg",level:4},{value:"Get Pressure in Bars:",id:"get-pressure-in-bars",level:4},{value:"Temperature Retrieval Function:",id:"temperature-retrieval-function",level:3},{value:"Get Temperature in Celsius:",id:"get-temperature-in-celsius",level:4},{value:"Altitude and Sea Level Functions:",id:"altitude-and-sea-level-functions",level:3},{value:"Get Altitude:",id:"get-altitude",level:4},{value:"Get Sea Level Pressure:",id:"get-sea-level-pressure",level:4},{value:"Advanced Features",id:"advanced-features",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"barometric-pressure-sensor",children:"Barometric Pressure Sensor"})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Barometric Pressure Sensor Module"})," features the ",(0,r.jsx)(n.strong,{children:"BMP180"})," sensor, which is widely used for measuring atmospheric pressure and temperature. These measurements are crucial for applications such as weather monitoring and altitude determination."]}),"\n",(0,r.jsx)(n.h3,{id:"what-is-the-bmp180",children:"What is the BMP180?"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"BMP180"})," is a digital barometric pressure sensor developed by ",(0,r.jsx)(n.strong,{children:"Bosch Sensortec"}),". It offers accurate readings of atmospheric pressure and temperature, which can be leveraged to predict weather changes and calculate altitude."]}),"\n",(0,r.jsx)(n.h4,{id:"key-concepts",children:"Key Concepts:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Barometric Pressure:"})," The pressure exerted by the atmosphere at any given point. Variations in this pressure can be an indicator of changing weather conditions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Temperature Measurement:"})," The BMP180 also measures temperature, which aids in more accurate pressure readings through compensation."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"how-the-bmp180-works",children:"How the BMP180 Works:"}),"\n",(0,r.jsx)(n.h4,{id:"measurement-process",children:"Measurement Process:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The sensor uses ",(0,r.jsx)(n.strong,{children:"piezoresistive technology"})," to detect variations in pressure."]}),"\n",(0,r.jsxs)(n.li,{children:["It communicates with microcontrollers like the ",(0,r.jsx)(n.strong,{children:"ESP32"})," using the ",(0,r.jsx)(n.strong,{children:"I2C protocol"})," to send digital outputs."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"data-output",children:"Data Output:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pressure"})," is reported in ",(0,r.jsx)(n.strong,{children:"Pascals (Pa)"})," and can be translated into altitude data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Temperature"})," is reported in ",(0,r.jsx)(n.strong,{children:"degrees Celsius (\xb0C)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-features-of-the-bmp180",children:"Key Features of the BMP180:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"High Accuracy:"})," The sensor provides an accuracy of \xb11 hPa for pressure measurements."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Low Power Consumption:"})," Suitable for battery-operated and portable devices."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"I2C Digital Interface:"})," Simplifies integration with most microcontrollers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Temperature Compensation:"})," Enhances the accuracy of pressure readings by considering temperature changes."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"real-world-applications",children:"Real-World Applications:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Weather Stations:"})," Used in monitoring atmospheric conditions in both personal and professional settings."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Altitude Measurement:"})," Applicable in navigation systems, drones, and similar environments."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environmental Monitoring:"})," Useful for monitoring pressure and temperature in various environmental conditions."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pinout-for-bmp180-module",children:"Pinout for BMP180 Module:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"VCC:"})," Power supply (3.3V to 5V)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GND:"})," Ground."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SCL:"})," Clock line for I2C communication."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SDA:"})," Data line for I2C communication."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For detailed technical specifications, refer to the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf",children:"BMP180 Datasheet"})}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"code-guide",children:"Code Guide"}),"\n",(0,r.jsx)(n.h3,{id:"library",children:"Library:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Library Name:"})," ",(0,r.jsx)(n.code,{children:"BarometricPressure.h"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"I2C address:"})," ",(0,r.jsx)(n.code,{children:"0x77u"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-flow",children:"Code Flow:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Include the Required Library:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <BarometricPressure.h>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create a Sensor Object:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"BarometricPressure sensor;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Setup:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Initialize serial communication and I2C."}),"\n",(0,r.jsx)(n.li,{children:"Check if the sensor is connected."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'void setup() {\n  Serial.begin(9600);\n  Wire.begin();\n  \n  if (sensor.begin()) {\n    Serial.println("Sensor is connected");\n  } else {\n    Serial.println("Sensor is not connected");\n  }\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Main Loop:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Continuously check if the sensor is connected and display data."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"void loop() {\n  if (sensor.ping()) {\n    // Fetch and display sensor data\n  }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"available-functions-in-barometricpressureh",children:["Available Functions in ",(0,r.jsx)(n.code,{children:"BarometricPressure.h"})]}),"\n",(0,r.jsx)(n.h3,{id:"class-creation-and-initialization",children:"Class Creation and Initialization:"}),"\n",(0,r.jsx)(n.h4,{id:"create-an-object",children:"Create an Object:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"BarometricPressure(bmp180AccuracyMode_t mode = ULTRA_LOW_POWER);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Create an object with a specified accuracy mode (e.g., ",(0,r.jsx)(n.code,{children:"ULTRA_LOW_POWER"}),", ",(0,r.jsx)(n.code,{children:"STANDARD"}),", ",(0,r.jsx)(n.code,{children:"HIGH_RESOLUTION"}),", ",(0,r.jsx)(n.code,{children:"ULTRA_HIGH_RESOLUTION"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"initialize-the-sensor",children:"Initialize the Sensor:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"bool begin();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Initializes the sensor. Returns ",(0,r.jsx)(n.code,{children:"true"})," if connected, otherwise ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"ping-the-sensor",children:"Ping the Sensor:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"bool ping(void);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Verifies if the sensor is still connected."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"pressure-retrieval-functions",children:"Pressure Retrieval Functions:"}),"\n",(0,r.jsx)(n.h4,{id:"get-pressure-in-pascals",children:"Get Pressure in Pascals:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int32_t getPressure(void);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Returns the current pressure in Pascals."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get-pressure-in-kilopascals",children:"Get Pressure in Kilopascals:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"float getPressurePascal(bool print = true);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Returns the current pressure in kiloPascals."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get-pressure-in-mmhg",children:"Get Pressure in mmHg:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"float getPressureHg(bool print = true);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Returns the current pressure in millimeters of mercury (mmHg)."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get-pressure-in-bars",children:"Get Pressure in Bars:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"float getPressureBar(bool print = true);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Returns the current pressure in bars."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"temperature-retrieval-function",children:"Temperature Retrieval Function:"}),"\n",(0,r.jsx)(n.h4,{id:"get-temperature-in-celsius",children:"Get Temperature in Celsius:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"float getTempC(bool print = true);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Returns the current temperature in degrees Celsius."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"altitude-and-sea-level-functions",children:"Altitude and Sea Level Functions:"}),"\n",(0,r.jsx)(n.h4,{id:"get-altitude",children:"Get Altitude:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"float getAltitude(float p0, bool print = true);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Returns the altitude relative to sea level using the reference pressure ",(0,r.jsx)(n.code,{children:"p0"})," (in Pascals)."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get-sea-level-pressure",children:"Get Sea Level Pressure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"float getSeaLevelPressure(float altitude, bool print = true);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," Returns the pressure at sea level based on the provided altitude."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The library includes additional features for fine-tuning sensor operations and applications. You can find example code in the ",(0,r.jsx)(n.strong,{children:"Arduino IDE"})," under ",(0,r.jsx)(n.strong,{children:"File -> Examples -> BarometricPressure_Demo"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(6540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);